//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UsingEntityFrameworkModel
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class SoftUniEntities : DbContext
    {
        public SoftUniEntities()
            : base("name=SoftUniEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Address> Addresses { get; set; }
        public DbSet<Department> Departments { get; set; }
        public DbSet<Employee> Employees { get; set; }
        public DbSet<Project> Projects { get; set; }
        public DbSet<Town> Towns { get; set; }
    
        [EdmFunction("SoftUniEntities", "fn_EmployeeNamesForJobTitle")]
        public virtual IQueryable<fn_EmployeeNamesForJobTitle_Result> fn_EmployeeNamesForJobTitle(string jobTitleParameter)
        {
            var jobTitleParameterParameter = jobTitleParameter != null ?
                new ObjectParameter("jobTitleParameter", jobTitleParameter) :
                new ObjectParameter("jobTitleParameter", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_EmployeeNamesForJobTitle_Result>("[SoftUniEntities].[fn_EmployeeNamesForJobTitle](@jobTitleParameter)", jobTitleParameterParameter);
        }
    
        [EdmFunction("SoftUniEntities", "fn_ListEmployees")]
        public virtual IQueryable<fn_ListEmployees_Result> fn_ListEmployees(string format)
        {
            var formatParameter = format != null ?
                new ObjectParameter("format", format) :
                new ObjectParameter("format", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<fn_ListEmployees_Result>("[SoftUniEntities].[fn_ListEmployees](@format)", formatParameter);
        }
    
        public virtual int usp_FindLastNames(string lettersToSearch)
        {
            var lettersToSearchParameter = lettersToSearch != null ?
                new ObjectParameter("LettersToSearch", lettersToSearch) :
                new ObjectParameter("LettersToSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FindLastNames", lettersToSearchParameter);
        }
    
        public virtual int usp_FindMiddleNames(string lettersToSearch)
        {
            var lettersToSearchParameter = lettersToSearch != null ?
                new ObjectParameter("LettersToSearch", lettersToSearch) :
                new ObjectParameter("LettersToSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FindMiddleNames", lettersToSearchParameter);
        }
    
        public virtual int usp_FindTowns(string lettersToSearch)
        {
            var lettersToSearchParameter = lettersToSearch != null ?
                new ObjectParameter("LettersToSearch", lettersToSearch) :
                new ObjectParameter("LettersToSearch", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("usp_FindTowns", lettersToSearchParameter);
        }
    
        public virtual ObjectResult<usp_SelectEmployeesBySeniority_Result> usp_SelectEmployeesBySeniority()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_SelectEmployeesBySeniority_Result>("usp_SelectEmployeesBySeniority");
        }
    
        public virtual ObjectResult<usp_testProcedure_Result> usp_testProcedure(Nullable<int> salary)
        {
            var salaryParameter = salary.HasValue ?
                new ObjectParameter("salary", salary) :
                new ObjectParameter("salary", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<usp_testProcedure_Result>("usp_testProcedure", salaryParameter);
        }
    }
}
